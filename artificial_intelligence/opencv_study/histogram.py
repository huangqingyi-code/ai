import cv2
import matplotlib.pyplot as plt
import numpy as np

# img = cv2.imread("image/11.jpg")
# plt.figure()
# img_B = cv2.calcHist([img],[0],None,[256],[0,256])
# plt.plot(img_B,label="B",color="b")
# img_G = cv2.calcHist([img],[1],None,[256],[0,256])
# plt.plot(img_G,label="G",color="g")
# img_R = cv2.calcHist([img],[2],None,[256],[0,256])
# plt.plot(img_R,label="R",color="r")
# plt.legend()
# # plt.ylim((1000,20000))
# plt.figure()
# img = img[...,::-1]
# plt.imshow(img)
# plt.show()

#直方图均衡化--基于灰度图，增强图像，使黑白对比更明显(去雾)
# src = cv2.imread("image/7.jpg")
# img = cv2.cvtColor(src,cv2.COLOR_BGR2GRAY)
# print(img.shape)
# cv2.imshow("img",img)
# old = cv2.calcHist([img],[0],None,[256],[0,256])
# plt.plot(old,label="new",color="r")
# dst = cv2.equalizeHist(img)
# print(dst.shape)
# cv2.imshow("dst",dst)
# new = cv2.calcHist([dst],[0],None,[256],[0,255])
# plt.plot(new,label="new",color="b")
# plt.show()

#自适应均衡化:自适应直方图均衡化是对图片的每一个局部进行均衡化操作
# src = cv2.imread("image/7.jpg",0)
# cv2.imshow("src",src)
# src_hist = cv2.calcHist([src],[0],None,[255],[0,255])
# plt.plot(src_hist,color="r")
# equal = cv2.equalizeHist(src)
# cv2.imshow("equal",equal)
# equal_hist = cv2.calcHist([equal],[0],None,[255],[0,255])
# plt.plot(equal_hist,color="b")
# clahe = cv2.createCLAHE(2,(5,5))
# adapt = clahe.apply(src)
# cv2.imshow("adapt",adapt)
# adapt_hist = cv2.calcHist([adapt],[0],None,[255],[0,255])
# plt.plot(adapt_hist,color="g")
# plt.show()

# 2D直方图：对于彩色图像的直方图通常情况下我们需要考虑每个的颜色（Hue）和饱和度（Saturation）
# src = cv2.imread("image/1.jpg")
# hsv = cv2.cvtColor(src,cv2.COLOR_BGR2HSV)
# hist = cv2.calcHist([hsv],[0,1],None,[18,25],[0,180,0,256])
# plt.imshow(hist)
# cv2.imshow("hist",hist)
# cv2.imshow("src",src)
# plt.show()

#直方图反向投影
roi = cv2.imread("image/10.jpg")
roi = cv2.cvtColor(roi,cv2.COLOR_BGR2HSV)
img = cv2.imread("image/9.jpg")
img = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)
roihist = cv2.calcHist([roi],[0,1],None,[180,255],[0,180,0,256])
cv2.normalize(roihist,roihist,0,255,cv2.NORM_MINMAX)
dst = cv2.calcBackProject([img],[0,1],roihist,[0,180,0,256],1)
kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE,(5,5))
# dst = cv2.medianBlur(dst,3)
dst = cv2.filter2D(dst,-1,kernel)
# dst = cv2.morphologyEx(dst,cv2.MORPH_CLOSE,kernel)
ret,thresh = cv2.threshold(dst,50,255,cv2.THRESH_BINARY)
thresh = cv2.merge((thresh,thresh,thresh))
img = cv2.cvtColor(img,cv2.COLOR_HSV2BGR)
res = cv2.bitwise_and(img,thresh)
ret = np.hstack((img,thresh,res))   #把三张图片水平合并成一张
print(thresh.shape)
print(img.shape)
print(res.shape)
print(ret.shape)
cv2.imshow("ret",ret)
# cv2.imshow("res",res)
# cv2.imshow("img",img)
cv2.waitKey(0)